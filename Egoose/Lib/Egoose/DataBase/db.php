<?php/** * Created by PhpStorm. * User: Marjan * Date: 14.04.2016 * Time: 14:36 */namespace Lib\Egoose\DataBase;use Entities;class db{    private $lastQuery="";    private $lastTable="";    private $HasWhereBeenSet=false;    private $BindedParams = array();    private $lastsuccess;    private $pdo;    public function __construct($pdo)    {        if($pdo==NULL)            return false;        else            $this->pdo = $pdo;    }    public function Select($expression)    {        $this->lastQuery .= "SELECT $expression ";        return $this;    }    public function From($table)    {        $this->lastTable = $table;        $this->lastQuery .= "FROM $table ";        return $this;    }    public function InnerJoin($jointable)    {        $this->lastQuery .= "INNER JOIN $jointable ";        return $this;    }    public function LeftJoin($jointable)    {        $this->lastQuery .= "JOIN $jointable ";        return $this;    }    public function On($onexpression)    {        $this->lastQuery .= "ON $onexpression ";        return $this;    }    public function Where($where)    {        $this->HasWhereBeenSet=true;        $this->lastQuery .= "WHERE $where ";        return $this;    }    public function GroupBy($groupBy)    {        $this->lastQuery .= "GROUP BY $groupBy ";        return $this;    }    public function Active()    {        if($this->HasWhereBeenSet)        {            $this->lastQuery .= "AND `".$this->lastTable."_active` = '1' ";        }        else        {            $this->lastQuery .= "WHERE `".$this->lastTable."_active` = '1' ";        }        return $this;    }    public function Desc()    {        $this->lastQuery .= "DESC ";        return $this;    }    public function Asc()    {        $this->lastQuery .= "ASC ";        return $this;    }    public function Limit($limit)    {        $this->lastQuery .= "LIMIT $limit";        return $this;    }    public function OrderBy($orderby)    {        $this->lastQuery .= "ORDER BY $orderby ";        return $this;    }    public function GetQuery()    {        return $this->lastQuery;    }    public function BindParam($value)    {        $this->BindedParams[] = $value;        return $this;    }    public function Insert($table,$array_param)    {        $array = array();        if(!is_array($array_param))        {            $array = (array)$array_param;        }        $fields=array_keys($array);        $values=array_values($array);        $fieldlist=implode(',', $fields);        $qs=str_repeat("?,",count($fields)-1);        $sql="INSERT INTO `".$table."` (".$fieldlist.") VALUES (${qs}?)";        $stmt=$this->pdo->prepare($sql);        $this->lastsuccess = $stmt->execute($values);        return $this;    }    public function Success()    {        return $this->lastsuccess;    }    public function Id()    {        return $this->pdo->lastInsertId();    }    public function Remove($table,$primary,$id)    {        $sql="";        $sql .= "DELETE FROM `".$table."` WHERE `".$primary."` =?";        $stmt=$this->pdo->prepare($sql);        $values[] = $id;        $this->lastsuccess = $stmt->execute($values);        return $this;    }    public function Update($table, $primary,$id, $array_param)    {        $array = array();        if(!is_array($array_param))        {            $array = (array)$array_param;        }        $fields=array_keys($array);        $values=array_values($array);        $fieldlist=implode(',', $fields);        $qs=str_repeat("?,",count($fields)-1);        $firstfield = true;        $sql = "UPDATE `".$table."` SET";        for ($i = 0; $i < count($fields); $i++) {            if(!$firstfield) {                $sql .= ", ";            }            $sql .= " ".$fields[$i]."=?";            $firstfield = false;        }        $sql .= " WHERE `".$primary."` =?";        $stmt=$this->pdo->prepare($sql);        $values[] = $id;        $this->lastsuccess = $stmt->execute($values);        return $this;    }    public function Run($table=null,$array_param=null,$single=false)    {        $array = array();        if($table == null)        {            $table = "\\Entities\\" . $this->lastTable;        }        else if(strpos($table,"\\")!==true)        {            $table = "\\Entities\\" . $this->lastTable;        }        else if(strpos($table,"/")!==true)        {            $table = "\\Entities\\" . $this->lastTable;        }        if(!empty($this->BindedParams) && $array_param==null)        {            $array = $this->BindedParams;        }        else        {            if(!is_array($array_param))            {                $array[] = $array_param;            }            else            {                $array = $array_param;            }        }        $table_forward_slash = str_replace("\\", "/", $table);        require_once $_SERVER["DOCUMENT_ROOT"].'/Egoose/'. $table_forward_slash .'.php';        $values = array_values($array);        try        {            $stmt = $this->pdo->prepare($this->lastQuery);            $stmt->execute($values);            $obj = $stmt->fetchAll(\PDO::FETCH_CLASS, $table);            $this->BindedParams = array();            $this->lastQuery="";            if($single)            {                if(!empty($obj))                    return $obj[0];                else                    return null;            }            return $obj;        }        catch(PDOException $e)        {            $this->BindedParams = array();            $this->lastQuery="";            return null;            echo $e->getMessage();        }    }}