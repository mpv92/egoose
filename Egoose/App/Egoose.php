<?php/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of EG * * @author Marjan */namespace App;use Core\Config\PageConfig;use Core\Bootstrap;use Lib\Egoose\DataBase\db;use Lib\Egoose\DataBase\EGDB;use Lib\Egoose\Http\Session\Session;use Lib\Egoose\Localization\Locator;use Lib\Egoose\Helper\Helper;use Lib\Egoose\UserManagement\Backend\LoginManager;class Egoose{    private static  $Controller         = "index";    private static  $Method             = "index";    public static   $URI                = array();    private static  $db                 = NULL;    public static   $SCOPE              = "";    public static   $IS_ADMIN           = false;    public function __construct()    {    }        /*     * Initilalize the Egoose App     */    public static function Start($is_admin=false)    {        ($is_admin) ? self::$SCOPE = "/Backend" : self::$SCOPE ="/Frontend";        self::$IS_ADMIN = $is_admin;        self::InitLocalization();        self::InitAutoLoad();        self::InitSession();        self::MvcUrlHandling();        self::InitDataBase();        self::Bootstrap();    }    /*     * Returns the Current Controller Name     */    public static function GetController()    {        return self::$Controller;    }    public static function SetController($controller)    {        self::$Controller = $controller;    }    public static function GetUri()    {        return $_SERVER['REQUEST_URI'];    }    /**@return db*/    public static function Db() : db    {        return self::$db;    }    /*     * Initialize the Database and the DB Layer (ORM etc.)     * */    private static function InitDataBase()    {        self::$db = EGDB::Init();    }    /**     * Requires Lib/Egoose/Localization/Translator.php    */    private static function InitLocalization()    {        require_once $_SERVER['DOCUMENT_ROOT'] . "/Egoose/Lib/Egoose/Localization/Translator.php";    }    /*     * Init Auto Loader     */    private static function InitAutoLoad()    {        spl_autoload_register(function($class){            $newclassname = str_replace("\\", "/", $class);            if(file_exists($_SERVER['DOCUMENT_ROOT'] . "/Egoose/" . $newclassname . ".php"))                require_once $_SERVER['DOCUMENT_ROOT'] . "/Egoose/" . $newclassname . ".php";        });    }    /*     * Initialize Bootstrap Logic     * */    private static function Bootstrap()    {        Bootstrap::Init();    }    public static function InitSession()    {        Session::Init();    }    private static function BackendSecurityCheck()    {        if(!self::$IS_ADMIN)            return;        else        {            $loginManager = new LoginManager();            if(!$loginManager->IsLoggedIn())            {                if(Egoose::GetController()!="login")                    self::Redirect("/".PageConfig::$BACKEND_URL."/login/");            }        }    }    /**     * Redirects to specific path    */    public static function Redirect(string $path)    {        header("Location: " . $path);        exit();    }    /*     * Handles all the Mvc URL Stuff     */    private static function MvcUrlHandling()    {       $uri = $_SERVER['REQUEST_URI'];       $uri = strtok ($uri, "?");       $uri_parts = explode("/",$uri);       foreach ($uri_parts as $part)       {           if($part!="" && $part!=PageConfig::$BASE_URL)           {               if(in_array($part, Locator::GetAvailableLanguages()))               {                   Locator::SetLanguage($part);               }               else if($part!=PageConfig::$BACKEND_URL)               {                    self::$URI[]=$part;               }           }       }        if(!Helper::IsNullOrEmptyString(@self::$URI[0]))        {            self::$Controller = @self::$URI[0];            self::$Method = @self::$URI[1];        }        /**         * Check if the user which wants to enter the backend is logged in, otherwise redirect to /backend/login/        */        self::BackendSecurityCheck();    }}