<?php/** * Created by PhpStorm. * User: Marjan * Date: 14.04.2016 * Time: 15:53 */namespace Core;use App\Egoose;use Entities;use Lib\Egoose\DataBase\Entity\EntityFilterParameters;class Entity{    public function __construct($payload=null)    {        if (is_array($payload))            $this->from_array($payload);    }    public function __call($name, $arguments) {        //Get the First 3 Chars to check if Get or Set        $check = substr($name, 0, 3);        //Get Everything after the first 3 chars to get the propertyname        $property_name = substr($name, 3);        $property_name = preg_replace('/\B([A-Z])/', '_$1', $property_name);        $property_name = strtolower($property_name);        if($check=="Get")        {            if(property_exists($this->GetRealClassName(),$property_name))            {                return $this->{$property_name};            }            else            {                $property_name_id = $property_name . "_id";                return self::GetInstance($property_name)->Get($this->{$property_name_id});            }        }        else if($check=="Set")        {            $this->{$property_name} = $arguments[0];            return $this;        }        else if($check=="Add")        {            /**@var $object_to_save Entity*/            $object_to_save = $arguments[0];            $object_to_save->Save();            $property_name = $property_name . "_id";            $this->{$property_name} = $object_to_save->GetId();        }        else        {            //throw method not found exception        }    }    public function from_array($array)    {        foreach(get_object_vars($this) as $attrName => $attrValue)        {            if(array_key_exists($attrName, $array))            {                $this->{$attrName} = $array[$attrName];            }        }    }    /**@deprecated */    public function ClassName()    {        return $this->GetSimpleClassName();    }    public function GetId()    {        $primary    = $this->GetSimpleClassName() . "_id";        return $this->$primary;    }    public function GetDateCreated()    {        $datecreated    = $this->GetSimpleClassName() . "_datecreated";        return $this->$datecreated;    }    public function Save()    {        $db = Egoose::Db();        $primary = $this->GetSimpleClassName() . "_id";        $return = $db->Insert($this->GetSimpleClassName(), $this);        $this->primary = $db->Id();        return $return;    }    public function ToArray()    {        $array;        if(!is_array($this))        {            $array[] = $this;        }        else        {            $array = $this;        }        return $array;    }    public function Update()    {        $primary    = $this->GetSimpleClassName() . "_id";        $id         = $this->$primary;        $db = Egoose::Db();        return $db->Update($this->GetSimpleClassName(), $primary, $id, $this);    }    public function Get($id)    {        $primary    = $this->GetSimpleClassName() . "_id";        $db = Egoose::Db();        return $db->Select("*")->From($this->GetSimpleClassName())->Where( $primary . " = ?")->Limit("0,1")->Run($this->GetSimpleClassName(), $id,true);    }    /**@return Entity*/    public function GetBy($filter,$value)    {        $db = Egoose::Db();        return $db->Select("*")->From($this->GetSimpleClassName())->Where( $filter . " = ?")->Limit("0,1")->Run($this->GetSimpleClassName(), $value,true);    }    public function Delete()    {        $primary    = $this->GetSimpleClassName() . "_id";        $id         = $this->$primary;        $db = Egoose::Db();        return $db->Remove($this->GetSimpleClassName(), $primary, $id);    }    /**@return Entity*/    public static function GetInstance($entity_name, $filters=null)    {        if(file_exists($_SERVER["DOCUMENT_ROOT"]."/Egoose/Entities/" . $entity_name . ".php"))        {            $entity_name = "Entities\\" . $entity_name;            return new $entity_name;        }        return null;    }    /**@return array*/    public static function GetCollection($entity_name,EntityFilterParameters $filters=null)    {        if(file_exists($_SERVER["DOCUMENT_ROOT"]."/Egoose/Entities/" . $entity_name . ".php"))        {            require_once $_SERVER["DOCUMENT_ROOT"] . "/Egoose/Entities/" . $entity_name . ".php";            $db = Egoose::Db();            return $db->Select("*")->From($entity_name)->Run("Entities\\" . $entity_name, $filters->ToArray(), false);        }    }    public function GetSimpleClassName()    {        return (new \ReflectionClass($this))->getShortName();    }    public function GetRealClassName()    {        return get_class($this);    }}