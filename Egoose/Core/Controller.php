<?php/* * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. *//** * Description of Controller * * @author Marjan */namespace Core;use App\Egoose;use Lib\Egoose\Output\Message\Message;use Lib\Egoose\Scope\Frontend\Frontend;class Controller{    //put your code here    public $model           = NULL;    private $messages;    private $title                  = "";    private $description            = "";    private $author                 = "";    private $keywords               = "";    private $backend                = null;    private $frontend               = null;    public function __construct()    {        /*$this->loginManager                 = new LoginManager();        $this->userManager                  = new UserManager($this->loginManager);*/    }    public function View(string $view)    {        $this->Header();        $this->Navigation();        if(strpos($view,'/') === false)            require_once $_SERVER["DOCUMENT_ROOT"] .'/Egoose'. Egoose::$SCOPE .'/Mvc/View/' . Egoose::GetController() . '/'.$view.'View.phtml';        else            require_once $_SERVER["DOCUMENT_ROOT"] .'/Egoose'. Egoose::$SCOPE .'/Mvc/View/'.$view.'View.phtml';        $this->Footer();    }    /**     * Singleton     * Get Backend     * @return \Lib\Egoose\Scope\Backend\Backend    */    public function Backend() : \Lib\Egoose\Scope\Backend\Backend    {        //Backend can't be called from Frontend        if(Egoose::$SCOPE=="/Frontend")            return null;        if(empty($this->backend))            return new \Lib\Egoose\Scope\Backend\Backend();        else            return $this->backend;    }    /**     * Singleton     * Get Frontend     * @return \Lib\Egoose\Scope\Frontend\Frontend;     */    public function Frontend()    {        //Frontend can't be called from Backend        if(Egoose::$SCOPE=="/Backend")            return null;        if(empty($this->frontend))            return new Frontend();        else            return $this->frontend;    }    public function Ajax()    {        Loader::LoadClass("Egoose/Lib/Egoose/Http/Ajax/AjaxResponse");        return new AjaxResponse();    }    /**@return Required*/    public function Required($required_value) : Required    {        Loader::LoadClass("Egoose/Lib/Egoose/Http/Parameters/Egoose/Required");        return new Required($required_value,$this);    }    public function PartialView()    {}    public function Restriction()    {}    public function GetHtml(string $path)/* : void*/    {        if(file_exists($_SERVER["DOCUMENT_ROOT"] ."/Egoose" . Egoose::$SCOPE . "/Html/". $path . ".phtml"))            require $_SERVER["DOCUMENT_ROOT"] ."/Egoose" . Egoose::$SCOPE . "/Html/". $path . ".phtml";    }    public static function Exists()    {        if(!file_exists($_SERVER["DOCUMENT_ROOT"]. '/Egoose' . Egoose::$SCOPE . '/Mvc/Controller/'.Egoose::$URI[0].'Controller.php'))            return false;        return true;    }    public function GetMessages()    {        return $this->messages;    }    public function SetMessage(string $message_type, string $message)    {        $this->messages[] = new Message($message_type,$message);    }    public function Redirect(string $path)    {        header("Location: " . $path);        exit();    }    /**     * @return mixed     */    public function GetTitle()    {        return $this->title;    }    /**     * @param mixed $title     */    public function SetTitle($title)    {        $this->title = $title;    }    /**     * @return mixed     */    public function GetDescription()    {        return $this->description;    }    /**     * @param mixed $description     */    public function SetDescription($description)    {        $this->description = $description;    }    /**     * @return mixed     */    public function GetAuthor()    {        return $this->author;    }    /**     * @param mixed $author     */    public function SetAuthor($author)    {        $this->author = $author;    }    /**     * @return mixed     */    public function GetKeywords()    {        return $this->keywords;    }    /**     * @param mixed $keywords     */    public function SetKeywords($keywords)    {        $this->keywords = $keywords;    }    #region private methods    private function Footer() /*: void*/    {        $this->GetHtml("Egoose/Footer/Footer");    }    private function Header()/* : void*/    {        $this->GetHtml("Egoose/Header/Header");    }    private function Navigation()    {        $this->GetHtml("Egoose/Header/Navigation");    }    #endregion}